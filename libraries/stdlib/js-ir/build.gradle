plugins {
    id "com.moowork.node" version "1.2.0"
}

description = 'Kotlin Standard Library for JS IR'

apply plugin: 'kotlin-platform-js'
apply plugin: 'idea'

configureDist(project)
configurePublishing(project)

def originalBuiltinsDir = "${rootDir}/core/builtins"
def builtinsSrcDir = "${buildDir}/builtin-sources"
def nativeBuiltinsSrcDir = "${buildDir}/native-builtin-sources"

// Sync native built-ins to separate directory because we don't
// need them all -- some of them are implemeted as proper code in 'js-ir/builtins'.
// Also, they don't compile on its own without error suppressing.
task prepareNativeBuiltinsSources(type: Sync) {
    from("${originalBuiltinsDir}/native/kotlin") {
        include "Annotation.kt"
        include "Any.kt"
        include "Array.kt"
        include "Boolean.kt"
        include "CharSequence.kt"
        include "Collections.kt"
        include "Comparable.kt"
        include "Coroutines.kt"
        include "Iterator.kt"
        include "Nothing.kt"
        include "Number.kt"
        include "String.kt"
        include "Throwable.kt"
    }
    into nativeBuiltinsSrcDir

    doLast {
        (new File(nativeBuiltinsSrcDir)).list().each { path ->
            def file = new File("${nativeBuiltinsSrcDir}/${path}")
            def sourceCode = """@file:Suppress(
                "NON_ABSTRACT_FUNCTION_WITH_NO_BODY",
                "MUST_BE_INITIALIZED_OR_BE_ABSTRACT",
                "EXTERNAL_TYPE_EXTENDS_NON_EXTERNAL_TYPE",
                "PRIMARY_CONSTRUCTOR_DELEGATION_CALL_EXPECTED",
                "WRONG_MODIFIER_TARGET"
            )
            """ + file.getText()
            file.setText(sourceCode)
        }
    }
}

// Sync these builtins into separate directory because
// ${builtinsDir}/src/kotlin/ArrayIntrinsics.kt is only used for JVM.
task prepareBuiltinsSources(type: Sync) {
    from("${originalBuiltinsDir}/src/kotlin/") {
        include "annotation/Annotations.kt"
        include "Annotations.kt"
        include "Function.kt"
        include "Iterators.kt"
        include "Range.kt"
        include "Progressions.kt"
        include "ProgressionIterators.kt"
        include "Ranges.kt"
        include "internal/InternalAnnotations.kt"
        include "internal/progressionUtil.kt"
        include "reflect/**/*.kt"
        include "Unit.kt"
    }
    into builtinsSrcDir
}

def jsCommonDir = "${projectDir}/../js"

sourceSets {
    main {
        kotlin {
            srcDir "${projectDir}/builtins"
            srcDir "${projectDir}/runtime"
            srcDir "${projectDir}/src"

            // "${jsCommonDir}/src/generated" is used for legacy backend
            srcDir "${jsCommonDir}/src/jquery"
            srcDir "${jsCommonDir}/src/kotlin"
            srcDir "${jsCommonDir}/src/org.w3c"

            srcDir "${jsCommonDir}/runtime"

            srcDir builtinsSrcDir
            srcDir nativeBuiltinsSrcDir
        }
    }
    test {
        kotlin {
            srcDir "${rootDir}/libraries/stdlib/js/test"
            srcDir "${jsCommonDir}/test/"
        }
    }
}

configurations {
    commonSources
}

dependencies {
    expectedBy project(":kotlin-stdlib-common")
    commonSources project(path: ":kotlin-stdlib-common", configuration: "sources")
    testCompile project(':kotlin-test:kotlin-test-js-ir')
}


compileKotlin2Js {
    dependsOn prepareNativeBuiltinsSources
    dependsOn prepareBuiltinsSources

    kotlinOptions {
        outputFile = "${buildDir}/classes/main/kotlin.js"
        moduleKind = "umd"
        main = "noCall"
        verbose = true
        freeCompilerArgs += [
            "-Xir",
            "-Xir-produce-only=klib",
            "-Xallow-kotlin-package",
            "-Xallow-result-return-type",
            "-Xuse-experimental=kotlin.Experimental",
            "-Xuse-experimental=kotlin.ExperimentalMultiplatform",
            "-Xuse-experimental=kotlin.contracts.ExperimentalContracts",
            "-XXLanguage:+InlineClasses",
        ]
    }
}

def jsTestOutputFile = "${buildDir}/classes/kotlin/test/kotlin-stdlib-js-ir_test.js"

compileTestKotlin2Js {
    kotlinOptions {
        moduleKind = "umd"
        verbose = true
        outputFile = jsTestOutputFile
        freeCompilerArgs += [
          "-Xir",
          "-Xir-produce-only=js",
          "-verbose",
          "-Xuse-experimental=kotlin.ExperimentalUnsignedTypes"
        ]
    }
}

archivesBaseName = 'kotlin-stdlib-js-ir'

jar {
    manifestAttributes(manifest, project, 'Main')
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from (sourceSets.main.allSource)
}

artifacts {
    archives sourcesJar
}

javadocJar()

dist {
    from (jar, sourcesJar)
}

node {
    download = true
    version = '8.9.4' // The default 6.9.1 has buggy hyperbolic functions implementation
    nodeModulesDir = buildDir
}

// Otherwise Node ignores nodeModulesDir
task deleteLegacyNodeModules(type: Delete) {
    delete "$projectDir/node_modules"
}

task installMocha(type: NpmTask, dependsOn: [deleteLegacyNodeModules]) {
    args = ['install', 'mocha']
}

task installTeamcityReporter(type: NpmTask, dependsOn: [deleteLegacyNodeModules]) {
    args = ['install', 'mocha-teamcity-reporter']
}

task runMocha(type: NodeTask, dependsOn: [compileTestKotlin2Js, installMocha]) {
    script = file("${buildDir}/node_modules/mocha/bin/mocha")

    if (project.hasProperty("teamcity")) {
        dependsOn installTeamcityReporter
        args = ['--reporter', 'mocha-teamcity-reporter']
    }
    else {
        args = ['--reporter', 'min']
    }

    args += [jsTestOutputFile]

    execOverrides {
        it.ignoreExitValue = rootProject.ignoreTestFailures
        it.workingDir = buildDir
    }
}

test.dependsOn runMocha
